from functools import partial
import itertools
import os
from pkg_resources import resource_filename
import sys

import katuali

KATUALI_VERSION = katuali.__version__
SNAKES = resource_filename('katuali', 'data')

# expand ~ to full paths. 
for key in config["RUNTIME"]:
    if isinstance(config["RUNTIME"][key], str):
        config["RUNTIME"][key] = os.path.expanduser(config["RUNTIME"][key])

# Always set the environment
LD_LIBRARY_PATH = config["RUNTIME"]["LD_LIBRARY_PATH"]
shell.prefix("""
set -euo pipefail;
export LD_LIBRARY_PATH=\"{LD_LIBRARY_PATH}\";
""".format(LD_LIBRARY_PATH=LD_LIBRARY_PATH))

# TODO: why might these not be int?
for key in ("THREADS_PER_JOB", "MEDAKA_CONSENSUS_NUM_GPU"):
    config["RUNTIME"][key] = int(config["RUNTIME"][key])


# NOTE on virtual environments
# Snakemake uses bash strict mode, virtualenv violates bash strict mode.
# https://snakemake.readthedocs.io/en/stable/project_info/faq.html#my-shell-command-fails-with-with-errors-about-an-unbound-variable-what-s-wrong
# so any activation commands must be wrapped as such:
#      set +u; config[RUNTIME][SOURCE] {config[RUNTIME][IN_MEDAKA]}; set -u; 


rule version:
    run:
        print('katuali version {}'.format(KATUALI_VERSION))


rule help:
    shell:
        'echo See https://nanoporetech.github.io/katuali/examples.html for help in getting started'


rule environment:
    # Just output the contents of PATH and LD_LIBRARY_PATH to log
    log:
        "katuali.sge.log",
    resources:
        gpu = 0
    shell:
        'echo $PATH; echo $LD_LIBRARY_PATH'


def get_reference(wildcards, config):
    # convenience function to get reference from config
    return config["DATA"][wildcards["runid"]]["REFERENCE"]


def get_contig_opt(wildcards):
    contig_opt = ""
    if wildcards["contig"] and wildcards["contig"] != "all_contigs":
        contig_opt = "-r {}".format(wildcards["contig"])
    logger.run_info("Setting region option to {}".format(contig_opt))
    return contig_opt


def get_opts(wildcards, config, config_key):

    if config_key not in config:
        raise KeyError('{} not in config'.format(config_key))

    suffix = wildcards["suffix"]

    # This allows one to use config entries specified on the command line
    # (which can't be nested)
    # TODO: do we still need this? 
    if not isinstance(config[config_key], dict):
        opts = config[config_key]
        logger.run_info("{} parameters were not nested, using {}".format(config_key, opts))

    elif suffix in config[config_key]:
        opts = config[config_key][suffix]
        logger.run_info("Using {} parameters specified by suffix: \"{}\"".format(config_key, suffix))
    else:
        raise KeyError('{} suffix \"{}\" not in {}'.format(config_key, suffix, set(config[config_key].keys())))

    return opts


def pipeline_targets(wildcards, config=config):
    p = 'all_' + wildcards['pipeline']
    if os.path.isfile(p):
        # Remove sentinel file from previous run. 
        os.remove(p)
    logger.run_info("Creating targets for pipeline: {}".format(p))
    targets = []
    for template in config['PIPELINES'][p]:
        targets.extend(katuali.expand_target_template(template, config))
    return targets


rule pipeline:
    input:
        targets = partial(pipeline_targets, config=config)
    output:
        "all_{pipeline,[^/]*}"
    resources:
        gpu = 0
    shell:
        """
        echo "Sentinel file. This will automatically be deleted and recreated if the pipeline is run again." > {output}
        """


include: os.path.join(SNAKES, "./basecalling.snake")
include: os.path.join(SNAKES, "./alignment.snake")
include: os.path.join(SNAKES, "./assembly.snake")
include: os.path.join(SNAKES, "./correction.snake")
include: os.path.join(SNAKES, "./evaluation.snake")
include: os.path.join(SNAKES, "./medaka_train.snake")
include: os.path.join(SNAKES, "./medaka_train_variant.snake")
