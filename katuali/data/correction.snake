
rule racon:
    input:
        venv = ancient(config["RUNTIME"]["IN_POMOXIS"]),
        draft = ancient("{dir}/consensus.fasta.gz"),
        basecalls = ancient("{dir}/basecalls.fastq.gz"),
    output:
        consensus = "{dir}/racon{suffix,[^/]*}/consensus.fasta.gz",
        basecalls = "{dir}/racon{suffix,[^/]*}/basecalls.fastq.gz"
    log:
        "{dir}/racon{suffix}.log"
    params:
        output_dir = lambda w: "{dir}/racon{suffix}".format(**dict(w)),
        opts = partial(get_opts, config=config, config_key="MINI_ASSEMBLE_OPTS"),
    threads: config["RUNTIME"]["THREADS_PER_JOB"]
    resources:
        gpu = 0
    shell:
        """
        check_files_exist {config[RUNTIME][CHECK_FILES_EXIST_OPTS]} {input} &> {log}
        set +u; {config[RUNTIME][SOURCE]} {input.venv}; set -u;
        # snakemake will create the output dir, mini_assemble will fail if it exists..
        rm -r {params[output_dir]} &&
        mini_assemble -i {input.basecalls} -r {input.draft} -o {params[output_dir]} -t {threads} -p assm {params[opts]} &>> {log}
        # compress output
        cat {params[output_dir]}/assm_final.fa | bgzip -c -@ {threads} > {output.consensus} 2>> {log}
        rm {params[output_dir]}/assm_final.fa
        # keep a link of basecalls with the consensus
        ln -s $PWD/{input.basecalls} $PWD/{params[output_dir]}/basecalls.fastq.gz
        """


rule porpita:
    input:
        porpita = ancient(config["RUNTIME"]["PORPITA_EXEC"]),
        venv = ancient(config["RUNTIME"]["IN_POMOXIS"]),
        draft = ancient("{dir}/consensus.fasta.gz"),
        draft_mmi = ancient("{dir}/consensus.fasta.gz.mmi"),
        draft_fai = ancient("{dir}/consensus.fasta.gz.fai"),
        basecalls = ancient("{dir}/basecalls.fastq.gz"),
    output:
        consensus = "{dir}/porpita{suffix,[^/]*}/consensus.fasta.gz",
        basecalls = "{dir}/porpita{suffix,[^/]*}/basecalls.fastq.gz"
    log:
        "{dir}/porpita{suffix}.log"
    threads: 8
    resources:
        gpu = 0
    params:
        opts = partial(get_opts, config=config, config_key="PORPITA_OPTS"),
        bam_prefix = lambda w, output: os.path.join(os.path.dirname(output.consensus), 'calls_to_draft')
    shell:
        """
        check_files_exist {config[RUNTIME][CHECK_FILES_EXIST_OPTS]} {input} &> {log}

        set +u; {config[RUNTIME][SOURCE]} {input.venv}; set -u;

        mini_align -i {input.basecalls} -r {input.draft} -p {params.bam_prefix} -t {threads} &>> {log}

        {input.porpita} {params.opts} -t {threads} {params.bam_prefix}.bam | bgzip -c > {output.consensus} 2>> {log}

        # keep a link of basecalls with the consensus
        ln -s $PWD/{input.basecalls} $PWD/{output.basecalls}
        # rm large intermediates
        rm {params.bam_prefix}*
        """


rule medaka:
    input:
        venv = ancient(config["RUNTIME"]["IN_MEDAKA"]),
        draft = ancient("{dir}/consensus.fasta.gz"),
        draft_mmi = ancient("{dir}/consensus.fasta.gz.mmi"),
        draft_fai = ancient("{dir}/consensus.fasta.gz.fai"),
        basecalls = ancient("{dir}/basecalls.fastq.gz"),
    output:
        consensus = "{dir}/medaka{suffix,[^/]*}/consensus.fasta.gz",
        basecalls = "{dir}/medaka{suffix,[^/]*}/basecalls.fastq.gz"
    log:
        "{dir}/medaka{suffix}.log"
    threads: 8
    resources:
        # NOTE: currently we will only use at most a single GPU
        gpu = config["RUNTIME"]["MEDAKA_CONSENSUS_NUM_GPU"]
    params:
        opts = partial(get_opts, config=config, config_key="MEDAKA_OPTS"),
        output_dir = lambda w, output: os.path.dirname(output.consensus),
        consensus_uncompr = lambda w, output:os.path.splitext(output.consensus)[0],
    shell:
        """
        check_files_exist {config[RUNTIME][CHECK_FILES_EXIST_OPTS]} {input} &> {log}

        if [ "{resources.gpu}" != "0" ];then
            GPU=$(pick_gpu 2>> {log})
            echo "Runnning on host $HOSTNAME with GPU $GPU" >> {log}
        else
            GPU=""
            echo "Runnning on host $HOSTNAME without GPU." >> {log}
        fi
        set +u; {config[RUNTIME][SOURCE]} {input.venv}; set -u;
        # snakemake will create the output dir if it does not exist, remove it if it exists.
        rm -r {params[output_dir]}

        CUDA_VISIBLE_DEVICES=$GPU medaka_consensus -i {input.basecalls} -d {input.draft} -o {params.output_dir} -t {threads} {params.opts} &>> {log}

        # compress output consensus
        cat {params.consensus_uncompr} | bgzip -c -@ {threads} > {output.consensus} 2>> {log}
        # keep a link of basecalls with the consensus
        ln -s $PWD/{input.basecalls} $PWD/{output.basecalls}
        # rm large intermediates
        rm {params.output_dir}/calls_to_draft.bam* {params.output_dir}/consensus_probs.hdf {params.consensus_uncompr}
        """
