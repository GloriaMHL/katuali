rule align_to_ref:
    input:
        venv = ancient(config["RUNTIME"]["IN_POMOXIS"]),
        basecalls = ancient("{runid,[^/]+}/{dir}/basecalls.fastq.gz"),
        ref = ancient(partial(get_reference, config=config)),
        ref_mmi = ancient(katuali.suffix_decorate(partial(get_reference, config=config), suffix='.mmi')),
        ref_fai = ancient(katuali.suffix_decorate(partial(get_reference, config=config), suffix='.fai')),
    output:
        bam = "{runid,[^/]+}/{dir}/align{suffix,[^/]*}/calls2ref.bam"
    log:
        "{runid}/{dir}/align{suffix,[^/]*}/align_to_ref.log"
    params:
        prefix = lambda w, output: os.path.splitext(output.bam)[0],
        output_dir = lambda w: "{runid}/align{suffix}".format(**dict(w)),
        opts = partial(get_opts, config=config, config_key="MINI_ALIGN_OPTS"),
    threads: config["RUNTIME"]["THREADS_PER_JOB"]
    resources:
        gpu = 0
    shell:
        """
        check_files_exist {config[RUNTIME][CHECK_FILES_EXIST_OPTS]} {input} &> {log}
        set +u; {config[RUNTIME][SOURCE]} {input.venv}; set -u;
        mini_align -i {input.basecalls} -r {input.ref} -p {params.prefix} -t {threads} {params[opts]}  &> {log}
        """


rule align_to_draft:
    input:
        venv = ancient(config["RUNTIME"]["IN_POMOXIS"]),
        basecalls = ancient("{dir}/basecalls.fastq.gz"),
        draft = ancient("{dir}/consensus.fasta.gz"),
        draft_mmi = ancient("{dir}/consensus.fasta.gz.mmi"),
        draft_fai = ancient("{dir}/consensus.fasta.gz.fai"),
    output:
        bam = "{dir}/calls2draft.bam"
    log:
        "{dir}/align_to_draft.log"
    threads: config["RUNTIME"]["THREADS_PER_JOB"]
    resources:
        gpu = 0
    shell:
        """
        check_files_exist {config[RUNTIME][CHECK_FILES_EXIST_OPTS]} {input} &> {log}
        set +u; {config[RUNTIME][SOURCE]} {input.venv}; set -u;
        mini_align -i {input.basecalls} -r {input.draft} -p {wildcards.dir}/calls2draft -t {threads} &> {log}
        """


rule mini_align_index:
    input:
        venv = ancient(config["RUNTIME"]["IN_POMOXIS"]),
        ref = ancient("{filename}"),
    output:
        mmi = "{filename}.mmi",
        fai = "{filename}.fai",
    log:
        "{filename}.mini_align_index.log"
    resources:
        gpu = 0
    shell:
        """
        set +u; {config[RUNTIME][SOURCE]} {input.venv}; set -u;
        # remove any existing indices (only one of them will exist) as
        # mini_align will die if some exist
        rm -rf {output}
        mini_align -r {input.ref} -X &> {log}
        """


rule subsample_bam:
    input:
        venv = ancient(config["RUNTIME"]["IN_POMOXIS"]),
        bam = ancient("{dir}/calls2ref.bam"),
    output:
        fastq = "{dir}/{contig}/{depth,[0-9]+}X{suffix,[^/]*}/basecalls.fastq.gz",
        bam = "{dir}/{contig}/{depth,[0-9]+}X{suffix,[^/]*}/calls2ref.bam",
        bai = "{dir}/{contig}/{depth,[0-9]+}X{suffix,[^/]*}/calls2ref.bam.bai",
    log:
        "{dir}/{contig}/{depth}X{suffix}/subsample.log"
    params:
        contig_opt = partial(get_contig_opt),
        prefix = lambda w: "{dir}/{contig}/{depth}X{suffix}/sub_sample".format(**dict(w)),
        opts = partial(get_opts, config=config, config_key="SUBSAMPLE_BAM_OPTS"),
    resources:
        gpu = 0
    shell:
        """
        check_files_exist {config[RUNTIME][CHECK_FILES_EXIST_OPTS]} {input} &> {log}
        set +u; {config[RUNTIME][SOURCE]} {input.venv}; set -u;
        subsample_bam {input.bam} {wildcards.depth} {params[contig_opt]} -o {params[prefix]} {params[opts]} -t {threads} &>>{log};
        sleep 5;

        # if params[contig_opt] specified multiple regions, we will have multiple bams we need to merge
        n_bams=$(ls {params[prefix]}*.bam | wc -l)
        if [ $n_bams -gt 1 ];
        then
            echo "Merging bams" >> {log}
            samtools merge - -@ {threads} {params[prefix]}*.bam | samtools sort -@ {threads} > {output.bam} 2>> {log}
            samtools index -@ {threads} {output.bam}  2>> {log}
            rm -f {params[prefix]}*.bam {params[prefix]}*.bam.bai
        else
            echo "Moving bam" >> {log}
            mv {params[prefix]}*.bam {output.bam}
            mv {params[prefix]}*.bam.bai {output.bai}
        fi

        samtools fastq {output.bam} -@ {threads} | bgzip -@ {threads} -c >{output.fastq} 2>> {log}
        """


rule extract_region_from_bam:
    input:
        venv = ancient(config["RUNTIME"]["IN_POMOXIS"]),
        bam = ancient("{dir}/{aligndir, align[^/]*}/calls2ref.bam"),
    output:
        fastq = "{dir}/{aligndir, align[^/]*}/{region,[^/]+}/basecalls.fastq.gz",
    log:
        "{dir}/{aligndir, align[^/]*}/{region}/extract_region_from_bam.log"
    resources:
        gpu = 0
    threads: 4
    shell:
        """
        check_files_exist {config[RUNTIME][CHECK_FILES_EXIST_OPTS]} {input} &> {log}
        set +u; {config[RUNTIME][SOURCE]} {input.venv}; set -u;
        (samtools view {input.bam} {wildcards.region} -b -@ {threads} | samtools fastq - -@ {threads} | bgzip -@ {threads} -c) >{output.fastq} 2>> {log}
        """


rule extract_region_from_bam_as_bam:
    input:
        venv = ancient(config["RUNTIME"]["IN_POMOXIS"]),
        bam = ancient("{dir}/{aligndir, align[^/]*}/calls2ref.bam"),
    output:
        bam = "{dir}/{aligndir, align[^/]*}/{region,[^/]+}/calls2ref.bam",
    log:
        "{dir}/{aligndir, align[^/]*}/{region}/extract_region_from_bam.log"
    resources:
        gpu = 0
    threads: 4
    shell:
        """
        check_files_exist {config[RUNTIME][CHECK_FILES_EXIST_OPTS]} {input} &> {log}
        set +u; {config[RUNTIME][SOURCE]} {input.venv}; set -u;
        samtools view {input.bam} {wildcards.region} -b -@ {threads} >{output.bam} 2>> {log}
        samtools index {output.bam}
        """


rule extract_region_from_bam_as_fastfive:
    input:
        venv = ancient(config["RUNTIME"]["IN_POMOXIS"]),
        bam = "{dir}/{guppydir, guppy[^/]*}/{aligndir, align[^/]*}/{region,[^/]+}/calls2ref.bam",
        fast5 = "{dir}/reads/",
    output:
        readlist = "{dir}/{guppydir, guppy[^/]*}/{aligndir, align[^/]*}/{region,[^/]+}/readlist.txt",
        fast5 = directory("{dir}/{guppydir, guppy[^/]*}/{aligndir, align[^/]*}/{region,[^/]+}/fast5/"),
    log:
        "{dir}/{guppydir, guppy[^/]*}/{aligndir, align[^/]*}/{region}/extract_fast5_from_bam.log"
    resources:
        gpu = 0
    threads: 4
    shell:
        """
        check_files_exist {config[RUNTIME][CHECK_FILES_EXIST_OPTS]} {input} &> {log}
        set +u; {config[RUNTIME][SOURCE]} {input.venv}; set -u;

        # extract list of reads with primary alignment
        echo "{input.bam}"
        echo "read_id" > {output.readlist}
        (samtools view {input.bam} -F 2308 -@ {threads} | cut -d$'\t' -f 1) > {output.readlist}
        fast5_subset --input {input.fast5} --save_path {output.fast5} \
            --read_id_list {output.readlist} --batch_size 8000 --recursive
        """
