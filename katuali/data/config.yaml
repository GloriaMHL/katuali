
# Master katuali configuration file template
# ------------------------------------------
#
# Having copied this file with the command:
#     katuali_config my_config.yaml
# it will be necessary to amend the `DATA:` dictionary in the first section below
# to define the dataset to be processed.
#
# The second section containing software locations should also be checked and
# amended if necessary.
#
# To run the predefined workflows: fast_assm_polish standard_assm_polish
# standard_assm_nanopolish all_medaka_train_features starting from fast5 input,
# nothing else need be done. If starting a workflow from basecall data
# (https://nanoporetech.github.io/katuali/examples.html#starting-from-existing-basecalls),
# basecalls should be placed under a folder as determined by the value of the
# `BASECALLER` in the pipeline options.


####################
# Input data options

# .fast5 files can be under top-level folders named by a RUNID (these need not
# be actual run UUIDs). Fast5s should be in RUNID/reads.  The keys within this
# data dictionary are RUNIDs.
#
# MEDAKA_TRAIN_REGIONS, MEDAKA_EVAL_REGIONS, and REFERENCE define regions for
# training and evaluation within the medaka training workflow, and are
# otherwise not used.
#
# GENOME_SIZE is required only in workflows using the canu assembler.
#
# In the example below we train from the "minion" run using "ecoli" and "yeast"
# contigs in the reference and evaluate on the "gridion" run using the contigs
# "ecoli", "yeast" and "na12878_chr21" in the reference.
DATA:
    'MinIonRun1': 
        'GENOME_SIZE': '4.8M'
        'MEDAKA_TRAIN_REGIONS': ['ecoli', 'yeast']
        'MEDAKA_EVAL_REGIONS': []
        'REFERENCE': 'ref.fasta'
    'MinIonRun2': 
        'GENOME_SIZE': '4.8M'
        'MEDAKA_TRAIN_REGIONS': ['ecoli', 'yeast']
        'MEDAKA_EVAL_REGIONS': []
        'REFERENCE': 'ref.fasta'   
    'GridIonRun1': 
        'GENOME_SIZE': '4.8M'
        'MEDAKA_TRAIN_REGIONS': []
        'MEDAKA_EVAL_REGIONS': ['ecoli', 'yeast', 'na12878_chr21']
        'REFERENCE': 'ref.fasta'   
    'GridIonRun2': 
        'GENOME_SIZE': '4.8M'
        'MEDAKA_TRAIN_REGIONS': []
        'MEDAKA_EVAL_REGIONS': ['ecoli', 'yeast', 'na12878_chr21']
        'REFERENCE': 'ref.fasta'   


##############################
# Location of various software
#
# Configuration for software is found toward the end of this config.

IN_MEDAKA: "~/git/medaka/venv/bin/activate"
IN_POMOXIS: "~/git/pomoxis/venv/bin/activate"
IN_RAY: "~/git/ray/venv/bin/activate"
CANU_EXEC: "~/git/canu-1.8/Linux-amd64/bin/canu"
NANOPOLISH: "~/git/nanopolish" 
SCRAPPIE: "~/git/scrappie"
FLAPPIE: "~/git/github/flappie"
GUPPY: "/usr/bin/guppy_basecaller"
SOURCE: "source"
LD_LIBRARY_PATH: ""  # set this for e.g. CUDA library path


##################
# Pipeline options

# Basecaller for predefined workflows. The `fast_assm_polish`,
# `standard_assm_polish` `standard_assm_nanopolish` and medaka training
# workflows use this value to determine the basecaller setup to use.
#
# It is recommended to set this to: guppy_flipflop
BASECALLER: "guppy_flipflop" 


#########################
# Compute/cluster options

# location of scratch space on cluster nodes
SCRATCH: ""
TMPSCRATCH: ""
# default number of slots
THREADS_PER_JOB: 16


#############################
# Options for medaka training

# This section can be ignored if not running a medaka training workflow

# Read depths at which to create assemblies for training, this should
# span the range of depths at which the model is to be used
# Use the --keep-going option of Snakemake if you are happy the relax
# the constraint of requiring all depths for all reference sequences. 
DEPTHS:
    [25, 50, 75, 100, 125, 150, 175, 200]

# if any of your medaka feature files are misssing (e.g. due to insufficient coverage for some runs / contigs)
# the medaka training step will not find all the features it expects and will not run. 
# If you want to just train on the feauture files which did get created, you can set this flag to true
# (after having already created the features with the flag set to false) 
USE_ONLY_EXISTING_MEDAKA_FEAT: false

# Run multiple training replicates - output will be in medaka_train_{suffix}
MEDAKA_TRAIN_REPLICATES:
    ["rep_1", "rep_2", "rep_3"]

# to test multiple trained models, use multiple suffixes. 
# The suffix should be a key within MEDAKA_OPTS specifying the path of a trained model 
MEDAKA_EVAL_SUFFIXES: ["_rep_1_best_val", "_rep_2_best_val", "_rep_3_best_val"]
MEDAKA_OPTS: 
    "": ""
    "_flipflop": "-m r941_flip235"
    "_rep_1_best_val": "medaka_train_rep1/model.best.val.hdf5"
    "_rep_2_best_val": "medaka_train_rep2/model.best.val.hdf5"
    "_rep_3_best_val": "medaka_train_rep3/model.best.val.hdf5"

# Medaka training features
MEDAKA_TRAIN_TRUTH_CHUNK: 10000  # this sets the size of truth chunks aligned to draft to provide labels. 
MEDAKA_TRAIN_FEAT_OPTS:
    "": "--chunk_len 1000 --chunk_ovlp 0"

MEDAKA_TRAIN_OPTS:
    "": "--mini_epochs 5 --validation_split 0.10"


############################
# Misc. options for programs
#
# For advanced users. See
# https://nanoporetech.github.io/katuali/examples.html#examples
# for help in contructing bespoke pipelines.
#
# For fully specified targets, rather than predefined workflows the below can
# be used to manipulate how each program is run. Each key acts as a shortcut
# for a specific parameter set (as well as functioning as a target name).
# Default parameters are given by the `""` targets

# Scrappie 
SCRAPPIE_OPTS: 
    "": "raw --model rgrgr_r94 --uuid"
    "_hp": "raw -H mean --model rgrgr_r94 --uuid"
        
# Flappie 
FLAPPIE_OPTS: 
    "": "raw --model rgrgr_r94 --uuid"
    "_r10c_pcr": "--model=r10c_pcr"

# Guppy        
GUPPY_OPTS: 
    "": "-c dna_r9.4_450bps.cfg"
    "_flipflop": "-c dna_r9.4.1_450bps_flipflop.cfg"
GUPPY_SLOTS: 8  # for passing to SGE parallel environment

# subsample_bam
SUBSAMPLE_BAM_OPTS:
    "": " --all_fail"
    "_prop": "--proportional --all_fail"
    "_filtered": "--quality 6 --coverage 90 --all_fail"

# Canu 
CANU_EXEC: "~/git/canu-1.8/Linux-amd64/bin/canu"
CANU_EXEC_OPTS: "useGrid=False"
CANU_OPTS:
    "": "" 

# mini_assemble
MINI_ASSEMBLE_OPTS: 
    "": ""
    "_ce": "-c -e 10"
    "_ces": "-c -e 10 -n 10"
 
# Canu 
CANU_EXEC_OPTS: "useGrid=False" # this shouldn't be changed, snakemake will be confused
CANU_OPTS:
    "": "" 

# Nanopolish
# wildcards in dynamic files cannot be constrained => we can't safely extract a
# suffix from dynamic nanopolish targets since they use nested config
NANOPOLISH_OPTS: "--fix-homopolymers"

# assess_assembly
ASSESS_ASSM_OPTS: "-C"

